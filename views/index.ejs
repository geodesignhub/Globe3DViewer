<!DOCTYPE html>
<html lang="en">

<head>
    <title>Geodesignhub Globe 3D Viewer</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>
    <link rel="apple-touch-icon" sizes="57x57" href="assets/objs/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="assets/objs/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="assets/objs/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="assets/objs/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="assets/objs/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="assets/objs/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="assets/objs/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="assets/objs/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="assets/objs/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="assets/objs/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="assets/objs/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="assets/objs/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="assets/objs/favicon-16x16.png">
    <link rel="manifest" href="assets/objs/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="assets/objs/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
    <link type="text/css" rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/style.css">
    <link rel="stylesheet" type="text/css" href="assets/css/base.css">



    <link rel="stylesheet" href="/assets/js/humane/flatty.css">

    <script type="text/javascript" src="/assets/js/jquery/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/js/geojsonlint/geojsonlint.js"></script>
    <script type="text/javascript" src="/assets/js/humane/humane.min.js"></script>
    <script type="text/javascript" src="/assets/js/socket.io/socket.io.min.js"></script>
    <script src="/assets/Build/Cesium/Cesium.js"></script>
    <style>
        @import url(/assets/Build/Cesium/Widgets/widgets.css);

        #controlPanel {
            position: absolute;
            top: 5px;
            right: 20px;
            background: rgba(42, 42, 42, 0.8);
            padding: 2px 2px;
            border-radius: 2px;
        }

        #controlPanel span {
            color: white;
        }

        #controlPanel p {
            margin: 0;
        }

        .densitydetails {
            border-bottom: 1px solid #e0e0e0;
        }

        .systitle {
            border-bottom: 1px solid #e0e0e0;
            font-size: 16px;
            padding-bottom: 5px;
            padding-top: 5px;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="row">

            <div class="col-sm-3 col-md-3 main">

                <h1 class="page-header">Geodesignhub Globe 3D Viewer</h1>
                <small>&copy; 2023 <a href="https://www.geodesignhub.com/">Geodesignhub</a>, see the <a
                        href="https://geodesignhub.github.io/Globe3DViewer">GitHub repository</a> for more
                    information.</small>
                <section class="information">
                    <div id="loadingGIF"><img src="/assets/objs/loading.gif">&nbsp;<span
                            id="procstatus">Processing</span>...<br><small>It may take some time for the server to
                            process all geometries for the first time, the scene will refresh once the processing is
                            complete.</small></div>
                    <br>
                    <div id="systemsCBCont" style="display:none">
                        <h4>Systems</h4>
                        <table class="table" id="systemsCB"></table>
                    </div>
                    <br>
                    <h4>Streets</h4>
                    <input id="showStreetsCB" class="checkbox-custom" name="checkbox-1" type="checkbox" checked> Display
                    generated streets<br><br>

                    <!-- <h4>Refresh</h4>
                    <div>
                        <p>
                            <button class="button" onclick="submitGJ()">Regenerate Scene</button>-->

                    <!--</p>
                    </div> -->


                </section>

                <div id='downloadLink' style='display:none'>
                    <h4>Download</h4>
                    <div>
                        <p><button class="button buttongreen" onclick="downloadGJ()">Download Data</button></p>
                    </div>
                </div>
            </div>

        </div>

        <div class="col-sm-9 col-md-9 sidebar">
            <div id="cesiumContainer"></div>
            <div id="controlPanel">

                <p>
                    <button class="cesium-button" id="def" onClick="setCameraHeadingPitch(this.id);">Default</button>
                    <button class="cesium-button" id="td" onClick="setCameraHeadingPitch(this.id);">Top Down</button>
                    <button class="cesium-button" id="ne" onClick="setCameraHeadingPitch(this.id);">North East</button>
                    <button class="cesium-button" id="se" onClick="setCameraHeadingPitch(this.id);">South West</button>
                    <button class="cesium-button" id="sw" onClick="setCameraHeadingPitch(this.id);">South East</button>
                    <button class="cesium-button" id="nw" onClick="setCameraHeadingPitch(this.id);">North West</button>

                </p>
            </div>
        </div>
    </div>
    </div>

    <script>
        function setCameraHeadingPitch(id) {
            var headingAngle;
            var pitchAngle;
            switch (id) {
                case 'def':
                    headingAngle = Cesium.Math.toRadians(20.0);
                    pitchAngle = Cesium.Math.toRadians(-45.0);
                    break;
                case 'td':
                    headingAngle = 0.0;
                    pitchAngle = -Cesium.Math.PI_OVER_TWO;
                    break;
                case 'ne':
                    headingAngle = Cesium.Math.toRadians(45);
                    pitchAngle = Cesium.Math.toRadians(-45.0);
                    break;
                case 'se':
                    headingAngle = Cesium.Math.toRadians(135);
                    pitchAngle = Cesium.Math.toRadians(-45.0);
                    break;
                case 'sw':
                    headingAngle = Cesium.Math.toRadians(225);
                    pitchAngle = Cesium.Math.toRadians(-45.0);
                    break;
                case 'nw':
                    headingAngle = Cesium.Math.toRadians(315);
                    pitchAngle = Cesium.Math.toRadians(-45.0);
                    break;

            }

            camera.setView({
                destination: Cesium.Cartesian3.fromDegrees(cameralng, cameralat, 5000.0),
                orientation: {
                    heading: headingAngle,
                    pitch: pitchAngle,
                    roll: 0.0
                }
            });


        }
        var bing = new Cesium.ImageryLayer.fromProviderAsync(
            Cesium.BingMapsImageryProvider.fromUrl(
                "https://dev.virtualearth.net", {
                key: '<%= bing_key %>',
                mapStyle: Cesium.BingMapsStyle.AERIAL
            })
        );
        var viewer = new Cesium.Viewer('cesiumContainer', {
            "geocoder": false,
            "homeButton": false,
            "baseLayerPicker": false,
            "infoBox": false,
            "sceneModePicker": false,
            "animation": false,
            "selectionIndicator": false,
            "fullscreenButton": false,
            "timeline": false,
            "navigationHelpButton": false,


        });
        var allPolygons;

        var scene = viewer.scene;
        var clock = viewer.clock;
        var camera = viewer.camera;
        viewer.imageryLayers.add(bing);
        var cameralat;
        var cameralng;

        var viewModel = {
            layers: [],
            baseLayers: [],
            upLayer: null,
            downLayer: null,
            selectedLayer: null,
            isSelectableLayer: function (layer) {
                return baseLayers.indexOf(layer) >= 0;
            }
        };


        function generateSystemCB(systems) {
            for (var x = 0; x < systems.length; x++) {
                $('#systemsCB').append('<tr><td class="systitle"><input name="sysCB" id=' + "'" + systems[x].name + "'" + 'type="checkbox"/> <span class="square c-' + systems[x].color.substring(1) + '"></span>&nbsp;&nbsp;' + systems[x].name + '</input>&nbsp;&nbsp;</td></tr>');
            }
        }

        function updateWorkerStatus(percent_complete) {
            var pc = percent_complete.toString() + '% processing completed';
            $("#procstatus").html(pc);

        }

        function setMapCenter(latlng) {

            // document.getElementById("ccontrols").style.visibility = "visible";
            // set new center
            latlng = latlng.split(',');
            var lat = latlng[0];
            var lng = latlng[1];
            cameralat = lat;
            cameralng = lng;
            var headingAngle = Cesium.Math.toRadians(20.0);
            var pitchAngle = Cesium.Math.toRadians(-45.0);
            camera.setView({
                destination: Cesium.Cartesian3.fromDegrees(lng, lat, 5000.0),
                orientation: {
                    heading: headingAngle,
                    pitch: pitchAngle,
                    roll: 0.0
                }
            });
        }

        var randomid = function () {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            })
        };

        function coordsToDegreesArray(coords) {
            var degreesArray = [];
            const clen = coords.length;
            for (var x = 0; x < clen; x++) {
                var curCoords = coords[x];
                degreesArray.push(curCoords[0]);
                degreesArray.push(curCoords[1]);
            }
            return degreesArray;
        }

        function hexToRgb(hex) {

            // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
            var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex, function (m, r, g, b) {
                return r + r + g + g + b + b;
            });

            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }

        function updateGLData(gjsonData, isFiltered) {

            humane.log("Rendering Scene..", {
                addnCls: 'humane-flatty-success'
            });
            if (isFiltered) {
                viewer.dataSources.removeAll();
            }
            $("#loadingGIF").hide();
            $("#downloadLink").show();
            $("#procstatus").html("Processing..");
            // for projects
            var promise = Cesium.GeoJsonDataSource.load(gjsonData);
            promise.then(function (dataSource) {
                viewer.dataSources.add(dataSource);
                var allGeometryInstances = [];
                var allpolicies = [];
                //Get the array of entities
                var entities = dataSource.entities.values;
                for (var i = 0; i < entities.length; i++) {
                    var curFeat = entities[i];
                    // var projectorpolicy = curFeat['properties']['areatype'];
                    var curProps = curFeat.properties.getValue();
                    var rgb = hexToRgb(curProps.roofColor);
                    var color;
                    if (curProps.isBuilding == 0) {
                        color = Cesium.Color.fromBytes(rgb.r, rgb.g, rgb.b, 100);
                    } else {
                        color = Cesium.Color.fromBytes(rgb.r, rgb.g, rgb.b);
                    }
                    // curFeat.polygon.perPositionHeight = true;
                    curFeat.polygon.material = color;
                    curFeat.polygon.outline = false;
                    curFeat.polygon.extrudedHeight = curProps.height;
                }
            }).catch(function (error) {
                //Display any errrors encountered while loading.
                // window.alert(error);
                console.log(error);
            });;
        }
    </script>
    <script>

            var socketHost = location.origin.replace(/^http/, 'ws');


            var socket = io.connect(socketHost);
            socket.on('connect_failed', function () {
                errorMsg('Data connection failed, please contact your administrator.');
            });
            socket.on('disconnect', function () {
                console.log('disconnected');
            });
            socket.on('welcome', function (msg) {
                console.log('Welcome message:', msg);
            });
            socket.on('connect', function () {
                socket.emit('room', synthesisid);
            });
            socket.on('connect_timeout', function () {
                console.log("timed out");

            });
            socket.on('message', function (data) {
                if (data.type == 'message') {
                    getSyndata(data.synthesisid);
                }
                else if (data.type == 'progress') {
                    // console.log(data.percentcomplete);
                    $("#procstatus").html(' ' + data.percentcomplete + '% complete');
                }
            });
        function getSyndata(synthesisid) {
            // console.log(synthesisid);
            const d = {
                "synthesisid": synthesisid
            };
            var url = '/getthreeddata/';
            var promise = $.ajax({
                url: url,
                type: 'POST',
                data: d
            });
            promise.done(function (data) {

                center = data.center;
                final3DGeoms = data.final3DGeoms;
                center = center.join();

                $("#loadingGIF").hide();

                $('#systemsCBCont').show();
                processGeoms();
            });

            promise.fail(function (data) {
                humane.log("Error in getting 3D data, you can refresh your screen.", {
                    addnCls: 'humane-flatty-error'
                });
            });
        }

        function processGeoms() {


            setMapCenter(center);
            $("#loadingGIF").hide();

            if (final3DGeoms.features.length > 0) {
                // $("#gjTA").text(JSON.stringify(gjresults));

                // inputGJ = JSON.stringify(gjresults);
                generateSystemCB(systems);

                // updateGLData(final3DGeoms, true);
                $('#systemsCBCont').show();
                // submitGJ();
                $("#showStreetsCB").click(function () {
                    var showstreets = ($(this).is(":checked")) ? 1 : 0;
                    var selectedsystems = [];
                    $('#systemsCB input:checked').each(function () {
                        selectedsystems.push($(this).attr('id'));
                    });
                    // $("#loadingGIF").show();
                    // var constrainWorker = new Worker('/assets/workers/constrainGeneratedFeatures.js');
                    // constrainWorker.onerror = function(e) {
                    //     console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                    //     $("#loadingGIF").hide();
                    //     humane.log("There was a error in processing, please try again.. ", {
                    //         addnCls: 'humane-flatty-error'
                    //     });
                    // };
                    // // console.log(selectedsystems);
                    // constrainWorker.postMessage({
                    //     'allFeaturesList': final3DGeoms,
                    //     'selectedsystems': JSON.stringify(selectedsystems),
                    //     'showstreets': showstreets
                    // });
                    // constrainWorker.addEventListener('message', function(e) {
                    //     if (e.data.mode === 'status') {
                    //         updateWorkerStatus(e.data.percentcomplete);
                    //     } else {
                    //         updateGLData(JSON.parse(e.data.polygons), true);
                    //     }
                    // }, false);
                });
                $('#systemsCB').click(function () {
                    var selectedsystems = [];
                    $('#systemsCB input:checked').each(function () {
                        selectedsystems.push($(this).attr('id'));
                    });
                    var showStreets = ($('#showStreetsCB').is(":checked")) ? 1 : 0;
                    $("#loadingGIF").show();
                    var constrainWorker = new Worker('/assets/workers/constrainGeneratedFeatures.js');
                    constrainWorker.onerror = function (e) {
                        console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                        $("#loadingGIF").hide();
                        humane.log("There was a error in processing, please try again.. ", {
                            addnCls: 'humane-flatty-error'
                        });
                    };
                    // console.log(selectedsystems);
                    constrainWorker.postMessage({
                        'allFeaturesList': JSON.stringify(final3DGeoms),
                        'selectedsystems': JSON.stringify(selectedsystems),
                        'showstreets': showStreets
                    });
                    constrainWorker.addEventListener('message', function (e) {
                        if (e.data.mode === 'status') {
                            updateWorkerStatus(e.data.percentcomplete);
                        } else {
                            const tmppl = JSON.parse(e.data.polygons);
                            updateGLData(tmppl, true);
                            dlData = tmppl;
                        }
                    }, false);

                });
            }
        }
        $("#loadingGIF").hide();
        var generatedData;
        var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
        var projectid = "<%= projectid %>"; //var test is now assigned to getTest which will only work on browsers         
        var synthesisid = "<%= synthesisid %>"; //var test is now assigned to getTest which will only work on browsers  
        var cteamid = "<%= cteamid %>"; //var test is now assigned to getTest which will only work on browsers  
        var systems = <%- systems %>; //var test is now assigned to getTest which will only work on browsers  
        var gjresults = <%- result %>;
        // var roads = <%- roads %>;
        var center = "<%= center %>";
        var final3DGeoms = <%- final3DGeoms %>;

        var dlData;
        // var inputGJ;

        function uuidv4() {
            return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, c =>
                (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)
            );
        }

        const sse = new EventSource("/sse?uuid=" + uuidv4());

        sse.addEventListener("progress-message", ({ data }) => {
            console.log(`${event.type} | ${event.data}`);
        });
        sse.addEventListener("channel-created", (event) => {
            console.log(`${event.type} | ${event.data}`);
        });

        sse.addEventListener("standard-message",
            ({ data }) => {
                let syn_id = JSON.parse(data);
                getSyndata(syn_id);

            });
        (function () {
            if (apitoken !== "0" && projectid !== "0" && cteamid !== "0" && synthesisid !== "0") {
                if (center !== "0") {
                    processGeoms();
                } else {
                    $("#loadingGIF").show();
                }
            }

        })();
        (function (console) {
            console.save = function (data, filename) {
                if (!data) {
                    console.error('Console.save: No data')
                    return;
                }
                if (!filename) filename = 'generatedfootprints.geojson'
                if (typeof data === "object") {
                    data = JSON.stringify(data, undefined, 4)
                }
                var blob = new Blob([data], {
                    type: 'text/json'
                }),
                    e = document.createEvent('MouseEvents'),
                    a = document.createElement('a')
                a.download = filename
                a.href = window.URL.createObjectURL(blob)
                a.dataset.downloadurl = ['text/json', a.download, a.href].join(':')
                e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null)
                a.dispatchEvent(e)
            }
        })(console)

        function downloadGJ() {
            // filter out streets
            const gd = dlData;
            var filteredGJ = {
                "type": "FeatureCollection",
                "features": []
            };
            var gendataFeatlen = gd.features.length;
            for (var k = 0; k < gendataFeatlen; k++) {
                var curFeat = gd.features[k];
                var prop = curFeat.properties;
                if (prop.isStreet) { } else {
                    filteredGJ.features.push(curFeat);
                }
            }
            console.save(filteredGJ);

        }
    </script>
</body>

</html>